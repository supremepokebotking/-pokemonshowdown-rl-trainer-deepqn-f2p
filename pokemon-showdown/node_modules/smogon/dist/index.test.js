"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const index_1 = require("./index");
const dirname = `${__dirname.slice(0, -4)}/src`;
const fixture = (s) => new Promise((resolve, reject) => {
    fs.readFile(path.join(dirname, 'fixtures', s), 'utf8', (err, data) => {
        if (err)
            return reject(err);
        resolve(data);
    });
});
const FIXTURES = {
    alakazam: fixture('alakazam.ss.json'),
    snorlax: fixture('snorlax.gs.html'),
    landorus: fixture('landorus.sm.html'),
    index: fixture('stats.index.html'),
    gen6nu: fixture('gen6nu.json'),
    gen21v1: fixture('gen21v1.json'),
};
describe('Analyses', () => {
    test('URL', () => {
        expect(index_1.Analyses.URL).toBe('https://www.smogon.com/dex/');
    });
    test('url', () => {
        expect(index_1.Analyses.url('Gengar')).toBe('https://www.smogon.com/dex/ss/pokemon/gengar/');
        expect(index_1.Analyses.url('Tapu Koko', 7)).toBe('https://www.smogon.com/dex/sm/pokemon/tapukoko/');
    });
    test('request', () => {
        expect(index_1.Analyses.request('Gengar', 3)).toEqual({
            url: 'https://www.smogon.com/dex/_rpc/dump-pokemon',
            init: {
                method: 'POST',
                headers: {
                    'content-type': 'application/json',
                },
                body: '{"gen":"rs","alias":"gengar"}',
            },
        });
    });
    test('parse', async () => {
        expect(index_1.Analyses.parse('foo')).toBeUndefined();
        expect(index_1.Analyses.parse(await FIXTURES.snorlax)).toBeDefined();
        expect(index_1.Analyses.parse(await FIXTURES.alakazam)).toBeUndefined();
    });
    test('process', async () => {
        expect(index_1.Analyses.process('foo')).toBeUndefined();
        let processed = index_1.Analyses.process(index_1.Analyses.parse(await FIXTURES.snorlax));
        expect(processed).toBeDefined();
        expect(processed.get('OU')[0].movesets[0].items).toEqual(['Leftovers']);
        processed = index_1.Analyses.process(index_1.Analyses.parse(await FIXTURES.landorus));
        expect(processed).toBeDefined();
        const set = processed.get('Doubles')[0].movesets[0];
        expect(set.moveslots[1]).toEqual([
            { move: 'Sludge Bomb', type: null },
            { move: 'Stone Edge', type: null },
        ]);
        expect(set.moveslots[2]).toEqual([{ move: 'Hidden Power', type: 'Ice' }]);
        processed = index_1.Analyses.process(JSON.parse(await FIXTURES.alakazam));
        expect(processed).toBeDefined();
        expect(processed.get('OU')[0].movesets[0].name).toEqual('Nasty Plot');
    });
    test('gen', () => {
        expect(index_1.Analyses.gen(3)).toBe('rs');
    });
});
describe('Statistics', () => {
    test('URL', () => {
        expect(index_1.Statistics.URL).toBe('https://www.smogon.com/stats/');
    });
    test('latest', async () => {
        expect(() => index_1.Statistics.latest('foo')).toThrow('Unexpected format for index');
        expect(index_1.Statistics.latest(await FIXTURES.index)).toEqual('2020-02');
    });
    test('url', () => {
        // standard
        expect(index_1.Statistics.url('2020-02', 'gen8ou')).toBe('https://www.smogon.com/stats/2020-02/chaos/gen8ou-1695.json');
        expect(index_1.Statistics.url('2020-02', 'gen6uu')).toBe('https://www.smogon.com/stats/2020-02/chaos/gen6uu-1630.json');
        expect(index_1.Statistics.url('2020-02', 'gen8ou', false)).toBe('https://www.smogon.com/stats/2020-02/chaos/gen8ou-0.json');
        expect(index_1.Statistics.url('2020-02', 'gen8ou', 1500)).toBe('https://www.smogon.com/stats/2020-02/chaos/gen8ou-1500.json');
        // gen7ou
        expect(index_1.Statistics.url('2020-01', 'gen7ou')).toBe('https://www.smogon.com/stats/2020-01/chaos/gen7ou-1695.json');
        expect(index_1.Statistics.url('2020-02', 'gen7ou')).toBe('https://www.smogon.com/stats/2020-02/chaos/gen7ou-1630.json');
        // gen7doublesou
        expect(index_1.Statistics.url('2017-02', 'gen7doublesou')).toBe('https://www.smogon.com/stats/2017-02/chaos/gen7doublesou-1695.json');
        expect(index_1.Statistics.url('2016-11', 'gen7doublesou')).toBe('https://www.smogon.com/stats/2016-11/chaos/gen7doublesou-1630.json');
        expect(index_1.Statistics.url('2020-01', 'gen7doublesou')).toBe('https://www.smogon.com/stats/2020-01/chaos/gen7doublesou-1695.json');
        expect(index_1.Statistics.url('2020-02', 'gen7doublesou')).toBe('https://www.smogon.com/stats/2020-02/chaos/gen7doublesou-1630.json');
        // smogondoublessuspecttest
        expect(index_1.Statistics.url('2015-05', 'smogondoublessuspecttest')).toBe('https://www.smogon.com/stats/2015-05/chaos/smogondoublessuspecttest-1630.json');
        expect(index_1.Statistics.url('2015-04', 'smogondoublessuspecttest')).toBe('https://www.smogon.com/stats/2015-04/chaos/smogondoublessuspecttest-1695.json');
        // randombattle
        expect(index_1.Statistics.url('2017-01', 'randombattle')).toBe('https://www.smogon.com/stats/2017-01/chaos/gen6randombattle-1630.json');
        expect(index_1.Statistics.url('2016-12', 'gen6randombattle')).toBe('https://www.smogon.com/stats/2016-12/chaos/gen6randombattle-1630.json');
        expect(index_1.Statistics.url('2016-12', 'randombattle')).toBe('https://www.smogon.com/stats/2016-12/chaos/randombattle-1695.json');
        expect(index_1.Statistics.url('2016-11', 'gen6randombattle')).toBe('https://www.smogon.com/stats/2016-11/chaos/randombattle-1695.json');
        // almostanyability
        expect(index_1.Statistics.url('2021-02', 'gen8almostanyability')).toBe('https://www.smogon.com/stats/2021-02/chaos/gen8almostanyability-1630.json');
        expect(index_1.Statistics.url('2021-02', 'gen6almostanyability')).toBe('https://www.smogon.com/stats/2021-02/chaos/gen6almostanyability-1630.json');
        // general gen6
        expect(index_1.Statistics.url('2017-06', 'gen6uu')).toBe('https://www.smogon.com/stats/2017-06/chaos/uu-1630.json');
        expect(index_1.Statistics.url('2017-07', 'uu')).toBe('https://www.smogon.com/stats/2017-07/chaos/gen6uu-1630.json');
        // late gen6
        expect(index_1.Statistics.url('2017-06', 'gen6monotype')).toBe('https://www.smogon.com/stats/2017-06/chaos/monotype-1630.json');
        expect(index_1.Statistics.url('2017-07', 'monotype')).toBe('https://www.smogon.com/stats/2017-07/chaos/monotype-1630.json');
        expect(index_1.Statistics.url('2018-01', 'monotype')).toBe('https://www.smogon.com/stats/2018-01/chaos/gen6monotype-1630.json');
        // legacy
        expect(index_1.Statistics.url('2014-12', 'battleofhoeen')).toBe('https://www.smogon.com/stats/2014-12/chaos/battleofhoeen-1630.json');
        expect(index_1.Statistics.url('2020-02', 'gen6battleofhoeen')).toBe('https://www.smogon.com/stats/2020-02/chaos/battleofhoeen-1630.json');
        expect(index_1.Statistics.url('2020-02', 'battleofhoeen')).toBe('https://www.smogon.com/stats/2020-02/chaos/gen6battleofhoeen-1630.json');
    });
    test('latestDate', async () => {
        expect(await index_1.Statistics.latestDate('foo')).toBeUndefined();
        expect(await index_1.Statistics.latestDate('gen6vgc2016')).toEqual({ date: '2021-05', count: 1 });
        expect(await index_1.Statistics.latestDate('gen6vgc2016', true)).toEqual({
            date: '2016-11',
            count: 160180,
        });
    });
    test('canonicalize', () => {
        expect(index_1.Statistics.canonicalize('ou')).toBe('gen6ou');
        expect(index_1.Statistics.canonicalize('foo')).toBe('foo');
        expect(index_1.Statistics.canonicalize('gen6uu')).toBe('gen6uu');
        expect(index_1.Statistics.canonicalize('gen8ou')).toBe('gen8ou');
        expect(index_1.Statistics.canonicalize('purehackmons')).toBe('gen6purehackmons');
    });
    test('process', async () => {
        let processed = index_1.Statistics.process(await FIXTURES.gen6nu);
        expect(processed.data['Bulbasaur'].usage).toEqual(0.25);
        processed = index_1.Statistics.process(await FIXTURES.gen21v1);
        expect(processed.info['number of battles']).toEqual(1);
    });
});
//# sourceMappingURL=index.test.js.map